
from odoo import api, fields, models,_
from odoo.addons import decimal_precision as dp

class Project(models.Model):
    _inherit = 'project.project'



    sale_order_ids = fields.One2many('sale.order','settings_sale_id',string="Sale Orders")

    location = fields.Text(string ="Location")


    product_specification = fields.One2many('product.specification','product_specification_line',string="Product Specifications")

    expense_ids = fields.One2many('hr.expense','expense_line_id',string="Expenses")





class SaleOrder(models.Model):
    _inherit = 'sale.order'

    settings_sale_id = fields.Many2one('project.project',string="Project")

    @api.onchange('settings_sale_id')
    def get_analytic_account(self):
        if self.settings_sale_id:
            self.analytic_account_id = self.settings_sale_id.analytic_account_id.id

class HrExpenese(models.Model):
    _inherit = 'hr.expense'

    expense_line_id = fields.Many2one('project.project',string="Project")

    @api.onchange('expense_line_id')
    def get_analytic_account(self):
        if self.expense_line_id:
            self.analytic_account_id = self.expense_line_id.analytic_account_id.id

class ProductSpecificationLine(models.Model):
    _name = 'product.specification'



    product_specification_line = fields.Many2one("project.project", string="Product specification lines", required=True, index=True,)


    product_name = fields.Many2one("product.product", string="Product" ,change_default=True, ondelete='restrict', required=True)

    details = fields.Char(string ="Details")

    # quantity = fields.Float(string ="Quantity")
    product_uom_qty = fields.Float(string='Quantity', digits=dp.get_precision('Product Unit of Measure'), required=True, default=1.0)
    product_uom = fields.Many2one('product.uom', string='Unit of Measure', required=True)
    cost_price = fields.Float(string="Cost Price")
    discount_id = fields.Integer(string="Discount")
    price_unit = fields.Float('Unit Price', required=True, digits=dp.get_precision('Product Price'), default=0.0)


    # @api.onchange('product_uom_qty')
    # def onchange_quantity_related(self,):
    #     if self.product_uom_qty:
    #         self.price_unit = self.cost_price * self.product_uom_qty
            
    @api.onchange('product_uom_qty','discount_id','cost_price')
    def onchange_discount_id(self,):
        if self.discount_id or self.cost_price or self.product_uom_qty:
            self.price_unit = self.product_uom_qty * (self.cost_price - self.discount_id)


    # product_uom = fields.Many2one('product.uom', string='Unit of Measure', required=True)

    # price_unit = fields.Float('Unit Price', required=True, default=0.0)

    # tax_id = fields.Many2many('account.tax', string='Taxes', domain=['|', ('active', '=', False), ('active', '=', True)])